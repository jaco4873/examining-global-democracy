getwd()
worldatabank <- read.csv("data/worldatabank.csv")
View(worldatabank)
# create a vector of the new column names
new_names <- c("country", "country_code", "series_name", "series_code",
"2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021")
# rename the columns
colnames(worlddata)[5:14] <- new_names[5:14]
# rename the columns
colnames(worlddatabank)[5:14] <- new_names[5:14]
world_databank <- read.csv("data/worldatabank.csv")
# create a vector of the new column names
new_names <- c("country", "country_code", "series_name", "series_code",
"2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021")
# rename the columns
colnames(world_databank)[5:14] <- new_names[5:14]
rm(worldatabank)
View(world_databank)
# create a vector of the new column names
new_names <- c("country", "country_code", "series_name", "series_code",
"2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021")
# rename the columns
colnames(world_databank)[5:14] <- new_names[5:14]
# rename the columns
colnames(world_databank)[1:14] <- new_names[1:14]
View(world_databank)
View(world_databank)
world_databank %>% filter("country", "series_name", 4:14)
world_databank %>% select("country", "series_name", 4:14)
View(world_databank)
world_databank <- world_databank %>% select("country", "series_name", 4:14)
View(world_databank)
world_databank <- world_databank %>% select("country", "series_name", 5:14)
world_databank <- read.csv("data/worldatabank.csv")
new_names <- c("country", "country_code", "series_name", "series_code",
"2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021")
# rename the columns
colnames(world_databank)[1:14] <- new_names[1:14]
world_databank <- world_databank %>% select("country", "series_name", 5:14)
View(world_databank)
View(merged_data_total_values)
View(merged_data)
View(fw_data)
View(fw_data_mergeready)
View(fw_data)
world_databank <- world_databank %>% select("country", "series_name", 5:14)
world_databank <- world_databank %>% select("country", "series_name", 5:14)
world_databank <- read.csv("data/worldatabank.csv")
Â¨# create a vector of the new column names
world_databank <- read.csv("data/worldatabank.csv")
# create a vector of the new column names
new_names <- c("country", "country_code", "series_name", "series_code",
"2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021")
# rename the columns
colnames(world_databank)[1:14] <- new_names[1:14]
world_databank <- world_databank %>% select("country", "series_name", 5:14)
View(world_databank)
class(world_databank$2012)
class(world_databank$2012)
class(world_databank$"2012")
world_databank_long <- world_databank %>%
pivot_longer(cols = c("2012":"2021"), names_to = "year", values_to = "value")
View(world_databank_long)
?rename()
fw_data <- fw_data %>% rename(year = edition)
View(fw_data)
fw_data_mergeready <-  fw_data %>% filter(year == 2020) # filter for relevant year
# Merge dataframes
fw_data_mergeready <-  fw_data %>% filter(year == 2020) # filter for relevant year
# join the two data frames by the 'country' column
merged_data <- left_join(fw_data_mergeready, dmr_data, by = "country")
# Wrangle
merged_data_total_values <- merged_data %>%
select(country, total, total_value_index) %>%  # select relevant columns
filter(!is.na(total_value_index)) %>% # filter for rows with missing values (territories are not included in Democracy Matrix ranking)
mutate(total_value_index = total_value_index/10) # scale the democracy ranking to 0-100 from 0-1000
# Draw Scatterplot
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index, label = country)) +
geom_text() +
geom_smooth(method = "lm", se = FALSE)
# Check correlation
cor(merged_data_total_values$total, merged_data_total_values$total_value_index)
# merge with Freedomhouse data
project_data <- left_join(world_databank_long, fw_data, by = c("country", "year"))
fw_data$year <- as.character(fw_data$year)
# merge with Freedomhouse data
project_data <- left_join(world_databank_long, fw_data, by = c("country", "year"))
View(project_data)
test <- world_databank_long %>%
semi_join(fw_data, by = "country")
View(test)
View(world_databank_long)
project_data <- world_databank_long %>%
semi_join(fw_data, by = "country")
rm(test)
# merge with Freedomhouse data
project_data <- semi_join(world_databank_long, fw_data, by = "country")
world_databank <- read.csv("data/worldatabank.csv")
# create a vector of the new column names
new_names <- c("country", "country_code", "series_name", "series_code",
"2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021")
# rename the columns
colnames(world_databank)[1:14] <- new_names[1:14]
world_databank <- world_databank %>% select("country", "series_name", 5:14)
# stack to long format
world_databank_long <- world_databank %>%
pivot_longer(cols = c("2012":"2021"), names_to = "year", values_to = "value")
# merge with Freedomhouse data
project_data <- semi_join(world_databank_long, fw_data, by = "country")
View(project_data)
View(fw_data)
View(world_databank_long)
View(fw_data)
View(fw_data_mergeready)
View(fw_data)
# Select Freedom house data for project_data
fw_data_project <- fw_data %>% select("country", "region", "year", "pr", "cl", "total")
View(fw_data_project)
# merge with Freedomhouse data
project_data <- left_join(world_databank_long, fw_data_project, by = c("country", "year"))
View(project_data)
filter(project_data, country == "Denmark")
project_data <- project_data %>% filter(year =! "2012")
project_data <- project_data %>% filter(year =! 2012)
project_data <- project_data %>% filter(year != 2012)
View(project_data)
filter(project_data, country == "Denmark")
View(project_data)
filter(project_data, region == "Europe")
project_data_europe <- filter(project_data, region == "Europe")
project_data_europe
View(project_data_europe)
project_data %>%
ggplot(aes(x = value, y = total, group = series_name)) +
geom_smooth(method = lm, SE = FALSE)
project_data %>%
ggplot(aes(x = value, y = total, group = series_name)) +
geom_smooth(method = lm, SE = FALSE) +
facet_wrap(year)
ggplot(project_data, aes(x = value, y = total, group = series_name)) +
geom_smooth(method = lm, SE = FALSE) +
facet_wrap(~ year)
ggplot(project_data, aes(x = year, y = total, group = series_name)) +
geom_smooth(method = lm, SE = FALSE) +
facet_wrap(~ year)
ggplot(project_data, aes(x = year, y = value, group = series_name)) +
geom_smooth(method = lm, SE = FALSE) +
facet_wrap(~ year)
project_data_europe <- filter(project_data, country == "Denmark")
project_data_europe
ggplot(project_data, aes(x = value, y = total, group = year)) +
geom_smooth(method = lm, SE = FALSE) +
facet_wrap(~ series_name)
ggplot(project_data, aes(x = value, y = total, group = year)) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ series_name)
ggplot(project_data, aes(x = value, y = total, group = coutry)) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ series_name)
ggplot(project_data, aes(x = value, y = total, group = country)) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ series_name)
ggplot(project_data, aes(x = value, y = total, group = year)) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ series_name)
pacman::p_load(tidyverse)
matrix1 <- matrix(seq(1,10, by = 1), ncol = 2)
matrix1 <- matrix(seq(1,10, by = 1), ncol = 2)
matrix2 <- matrix(seq(1,10, by = 1), nrow = 2)
View(matrix1)
?matrix()
View(matrix2)
# 5x2 premultiplied by 2x5 = 5x5
matrix1 %*% matrix2
# 2x5 premultiplied by 5x2 = 2x2
matrix2 %*% matrix1
matrix1
# We can transpose using t()
t(matrix1)
t(matrix1) %*% matrix1
matrix1 %*% t(matrix1)
solve(t(matrix1) %*% matrix1)
matrix3 <- matrix( c(1,2,3,6) ,ncol = 2, nrow = 2)
det(matrix3)
View(matrix3)
matrix3
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(janitor)
library(tidyverse)
setwd("/Users/jacoblillelund/Documents/applied-social-science")
# load data
# FREEDOM HOUSE
fw_data <- read_excel("All_data_FIW_2013-2022.xlsx", sheet = 2, skip = 1, col_names = TRUE)
library(readxl)
library(janitor)
library(tidyverse)
setwd("/Users/jacoblillelund/Documents/applied-social-science/data")
# load data
# FREEDOM HOUSE
fw_data <- read_excel("All_data_FIW_2013-2022.xlsx", sheet = 2, skip = 1, col_names = TRUE)
fw_data <- fw_data %>% # tidy data with janitor-package
clean_names()
fw_data <- fw_data %>% rename(country = country_territory) # rename column
fw_data <- fw_data %>% rename(year = edition)
fw_data$year <- as.character(fw_data$year)
# DEMOCRACY MATRIX RANKING
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
dmr_data <- dmr_data %>% # tidy data with janitor-package
clean_names()
dmr_data <- dmr_data %>% select(country, total_value_index) # select values
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(janitor)
library(tidyverse)
setwd("/Users/jacoblillelund/Documents/applied-social-science/data")
# load data
# FREEDOM HOUSE
fw_data <- read_excel("All_data_FIW_2013-2022.xlsx", sheet = 2, skip = 1, col_names = TRUE)
fw_data <- fw_data %>% # tidy data with janitor-package
clean_names()
fw_data <- fw_data %>% rename(country = country_territory) # rename column
fw_data <- fw_data %>% rename(year = edition)
fw_data$year <- as.character(fw_data$year)
# DEMOCRACY MATRIX RANKING
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
dmr_data <- dmr_data %>% # tidy data with janitor-package
clean_names()
dmr_data <- dmr_data %>% select(country, total_value_index) # select values
# Merge dataframes
fw_data_mergeready <-  fw_data %>% filter(year == 2020) # filter for relevant year
# join the two data frames by the 'country' column
merged_data <- left_join(fw_data_mergeready, dmr_data, by = "country")
# Wrangle
merged_data_total_values <- merged_data %>%
select(country, total, total_value_index) %>%  # select relevant columns
filter(!is.na(total_value_index)) %>% # filter for rows with missing values (territories are not included in Democracy Matrix ranking)
mutate(total_value_index = total_value_index/10) # scale the democracy ranking to 0-100 from 0-1000
# Draw Scatterplot
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index, label = country)) +
geom_text() +
geom_smooth(method = "lm", se = FALSE)
# Check correlation
cor(merged_data_total_values$total, merged_data_total_values$total_value_index)
inspect <- fw_data %>% select(country, edition, a, b, c, add_q, add_a, pr, d, e, f, g, cl, total)
View(fw_data)
View(fw_data)
View(dmr_data)
# DEMOCRACY MATRIX RANKING
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
View(dmr_data)
# DEMOCRACY MATRIX RANKING
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
dmr_data <- dmr_data %>% # tidy data with janitor-package
clean_names()
dmr_data <- dmr_data %>% select(country, total_value_index) # select values
# DEMOCRACY MATRIX RANKING
getwd()
setwd("/Users/jacoblillelund/Documents/applied-social-science/data")
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
# DEMOCRACY MATRIX RANKING
getwd()
setwd("/Users/jacoblillelund/Documents/applied-social-science/data")
setwd("/Users/jacoblillelund/Documents/applied-social-science/data")
setwd("/Users/jacoblillelund/Documents/applied-social-science/data")
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
# DEMOCRACY MATRIX RANKING
getwd()
setwd("/Users/jacoblillelund/Documents/applied-social-science/data")
dmr_data <- read_excel("/data/democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
dmr_data <- read_excel("data/democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
View(dmr_data)
dmr_data <- dmr_data %>% # tidy data with janitor-package
clean_names()
dmr_data <- dmr_data %>% select(country, total_value_index) # select values
View(merged_data_total_values)
View(merged_data)
world_databank <- read.csv("data/worldatabank.csv")
View(world_databank)
# create a vector of the new column names
new_names <- c("country", "country_code", "series_name", "series_code",
"2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021")
# rename the columns
colnames(world_databank)[1:14] <- new_names[1:14]
View(world_databank)
world_databank <- world_databank %>% select("country", "series_name", 5:14)
View(world_databank)
View(fw_data)
# stack to long format
world_databank_long <- world_databank %>%
pivot_longer(cols = c("2012":"2021"), names_to = "year", values_to = "value")
View(world_databank_long)
# Select Freedom house data for project_data
fw_data_project <- fw_data %>% select("country", "region", "year", "pr", "cl", "total")
View(fw_data_project)
# merge with freedomhouse data
project_data <- left_join(world_databank_long, fw_data_project, by = c("country", "year")) %>%
rename("adjusted_income" = )
View(project_data)
# merge with freedomhouse data
project_data <- left_join(world_databank_long, fw_data_project, by = c("country", "year")) %>%
rename("adjusted_income" = )
# merge with freedomhouse data
project_data <- left_join(world_databank_long, fw_data_project, by = c("country", "year")) %>%
project_data <- project_data %>% filter(year != 2012)
# merge with freedomhouse data
project_data <- left_join(world_databank_long, fw_data_project, by = c("country", "year"))
# remove year 2012, does not exist in freedom house scores
project_data <- project_data %>% filter(year != 2012)
ggplot(project_data, aes(x = value, y = total, group = year)) +
geom_smooth(method = lm, se = FALSE) +
facet_wrap(~ series_name)
# filter to EU countries (in progress)
project_data_europe <- filter(project_data, region == "Europe")
project_data_europe
View(project_data_europe)
unique(project_data_europe$country)
len(unique(project_data_europe$country))
lengt(unique(project_data_europe$country))
length(unique(project_data_europe$country))
project_data_europe %>% filter(series_name = "Adjusted net national income per capita (constant 2015 US$)")
project_data_europe %>% filter(series_name == "Adjusted net national income per capita (constant 2015 US$)")
project_data_europe %>% filter(series_name == "
Total natural resources rents (% of GDP)")
project_data_europe %>% filter(series_name == "Total natural resources rents (% of GDP)")
project_data_europe %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total) +
geom_point()
)
project_data_europe %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total) +
geom_point())
project_data_europe %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point()
project_data_europe %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
project_data_europe %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
project_data_europe %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point()
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point()
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_histogram()
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_histogram(fill = color)
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_histogram(aes(x= value))
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value)) +
geom_histogram()
class(project_data$value)
as.numeric(project_data$value)
project_data_test$value <- as.numeric(project_data$value)
test <- project_data
test$value <- as.numeric(test$value)
View(test)
project_data$value <- as.numeric(project_data$value)
rm(test)
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value)) +
geom_histogram()
geom_point()
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point()
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point()
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = log(value), y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
project_data %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ series_name)
project_data %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
project_data %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
project_data %>%
filter(series_name == "Adjusted net national income per capita (constant 2015 US$)") %>%
filter(year == "2020") %>%
ggplot(aes(x = value, y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
project_data %>%
filter(series_name == "Adjusted net national income per capita (constant 2015 US$)") %>%
filter(year == "2020") %>%
ggplot(aes(x = log(value), y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
project_data %>%
filter(series_name == "Adjusted net national income per capita (constant 2015 US$)") %>%
ggplot(aes(x = log(value), y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~year)
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
cor(x = value, y = total)
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
lm(total ~ value)
# Explore Natural resources data
project_data %>%
filter(series_name == "Total natural resources rents (% of GDP)") %>%
filter(year == "2020") %>%
ggplot(aes(x = log(value), y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Explore National Income data
project_data %>%
filter(series_name == "Adjusted net national income per capita (constant 2015 US$)") %>%
ggplot(aes(x = log(value), y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~year)
# Explore National Income data
project_data %>%
filter(series_name == "Income share held by lowest 20%") %>%
ggplot(aes(x = log(value), y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~year)
# Explore National Income data
project_data %>%
filter(series_name == "Income share held by highest 20%") %>%
ggplot(aes(x = log(value), y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~year)
# Explore National Income data
project_data %>%
filter(series_name == "Gini index") %>%
ggplot(aes(x = log(value), y = total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~year)
