# Find estimate and intervals
icer_estimate <- mean(data$ratio)
icer_50_percent_interval <- quantile(data$ratio, probs = c(0.25, 0.75))
icer_95_percent_interval <- quantile(data$ratio, probs = c(0.025, 0.975))
# Print results
cat("The estimated incremental cost-effectiveness ratio is", round(icer_estimate, 2), "\n")
cat("The 50% interval for the incremental cost-effectiveness ratio is [", round(icer_50_percent_interval[1], 2), ",", round(icer_50_percent_interval[2], 2), "]\n")
cat("The 95% interval for the incremental cost-effectiveness ratio is [", round(icer_95_percent_interval[1], 2), ",", round(icer_95_percent_interval[2], 2), "]")
# Define the new standard error for the difference in effectiveness
delta_e_se_2 <- 2
# Generate new random draws of cost and effectiveness differences
delta_c_v2 <- rt(n_sim, df_c) * delta_c_se + delta_c_mean
delta_e_v2 <- rt(n_sim, df_e) * delta_e_se_2 + delta_e_mean
# Plot histogram of cost difference
hist(delta_c_v2,
breaks = 20,
xlab = "Cost Difference",
main = "Distribution of Cost Differences",
col = "steelblue")
# Plot histogram of effectiveness difference
hist(delta_e_v2,
xlab = "Effectiveness Difference",
main = "Distribution of Effectiveness Differences",
col = "steelblue")
# Create a tibble for ggplot
data_v2 <- tibble(delta_c_v2, delta_e_v2)
# Make scatterplot in ggplot
ggplot(data_v2, aes(x = delta_c_v2, y = delta_e_v2)) +
geom_point() +
xlab("Cost Difference") +
ylab("Effectiveness Difference") +
ggtitle("Scatterplot of Cost and Effectiveness Differences between Treatments A and B") +
theme_minimal()
# Mutate data_v2-tibble with a ratio-column
data_v2 <- data_v2 %>% mutate(ratio = delta_c_v2/delta_e_v2)
# Find estimate and intervals
icer_estimate_v2 <- mean(data_v2$ratio)
icer_50_percent_interval_v2 <- quantile(data_v2$ratio, probs = c(0.25, 0.75))
icer_95_percent_interval_v2 <- quantile(data_v2$ratio, probs = c(0.025, 0.975))
# Print results
cat("The estimated incremental cost-effectiveness ratio is", round(icer_estimate_v2, 2), "\n")
cat("The 50% interval for the incremental cost-effectiveness ratio is [", round(icer_50_percent_interval_v2[1], 2), ",", round(icer_50_percent_interval_v2[2], 2), "]\n")
cat("The 95% interval for the incremental cost-effectiveness ratio is [", round(icer_95_percent_interval_v2[1], 2), ",", round(icer_95_percent_interval_v2[2], 2), "]")
?rbinom()
# Load packages
library(tidyverse)
n_sims = 20000 ## number of simulations
cumulative <- c() ## empty list
for (i in 1:n_sims) {
gender <- rbinom(10, 1, 0.52) ## Females at 52% according to book
weight = ifelse(gender == 1,
rnorm(10, mean = 4.96, sd = 0.2), ## Females weight
rnorm(10, mean = 5.13, sd = 0.17)) ## Males weight
total = sum(exp(weight)) ## getting the weight from log to "normal"
cumulative[i] = total
}
exceeds = sum(cumulative > 1750) ## How many times did it go over 1750?
prob = exceeds/n_sims ## finding probability
percent_prob = prob*100 ## probability in percent
cat("The probability that the weight exceeds 1750 lbs is", percent_prob, "%")
# Convert cumulative results to tibble
weight_outcomes <- tibble(cumulative)
# Plot density curve in ggplot
weight_outcomes %>%
ggplot(aes(x = cumulative)) +
geom_histogram(aes(y=after_stat(density)), binwidth = 5, fill = "steelblue") +
stat_function(
fun = dnorm,
args= list(mean = mean(weight_outcomes$cumulative),
sd = sd(weight_outcomes$cumulative))) +
geom_vline(aes(xintercept = 1750), linetype = "dashed") +
xlab("Total weight (lbs)") +
ylab("Density") +
theme_minimal()
n_sims2 = 10000 ## Number of sims
widgetsaves <- rnorm(n_sims2, 5, 4) ## Simulating the savings
marketshare <- rnorm(n_sims2, 40000, 10000) ## Simulating the market share
total_saved = widgetsaves*marketshare ## Getting total savings
mean_total_saved<- mean(total_saved) ## Getting mean of total savings
cat("The total savings based on 10000 simulations is", round(mean_total_saved, 2), "USD")
# Create tibble
total_saved_df <- tibble(total_saved)
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved), binwidth = 20) + # map the x variable
geom_histogram(fill = "steelblue", color = "black") + # create histogram with fill color
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
library(ggplot2)
# Set simulation parameters
n_sim <- 1000
# Parameters for cost-difference simulation (part 1)
delta_c_mean <- 600
delta_c_se <- 400
df_c <- 50
# Parameters for effectiveness difference simulation (part 2)
delta_e_mean <- 3
delta_e_se <- 1
df_e <- 100
# Generate random draws of cost and effectiveness differences:
# rt() generates a t-score in t-distribution with the given df's, mean of 0, and sd of 1
# this value is multiplied with the given standard error, and then the mean is added
# that gives us a random draw from the distribution
delta_c <- rt(n_sim, df_c) * delta_c_se + delta_c_mean
delta_e <- rt(n_sim, df_e) * delta_e_se + delta_e_mean
# Plot histogram of cost difference
hist(delta_c,
breaks = 20,
xlab = "Cost Difference",
main = "Distribution of Cost Differences",
col = "steelblue")
# Plot histogram of effectiveness difference
hist(delta_e,
xlab = "Effectiveness Difference",
main = "Distribution of Effectiveness Differences",
col = "steelblue")
# Create a tibble for ggplot
data <- tibble(delta_c, delta_e)
# Make scatterplot in ggplot
ggplot(data, aes(x = delta_c, y = delta_e)) +
geom_point() +
xlab("Cost Difference") +
ylab("Effectiveness Difference") +
ggtitle("Scatterplot of Cost and Effectiveness Differences between Treatments A and B") +
theme_minimal()
# Mutate data-tibble with a ratio-column
data <- data %>% mutate(ratio = delta_c/delta_e)
# Find estimate and intervals
icer_estimate <- mean(data$ratio)
icer_50_percent_interval <- quantile(data$ratio, probs = c(0.25, 0.75))
icer_95_percent_interval <- quantile(data$ratio, probs = c(0.025, 0.975))
# Print results
cat("The estimated incremental cost-effectiveness ratio is", round(icer_estimate, 2), "\n")
cat("The 50% interval for the incremental cost-effectiveness ratio is [", round(icer_50_percent_interval[1], 2), ",", round(icer_50_percent_interval[2], 2), "]\n")
cat("The 95% interval for the incremental cost-effectiveness ratio is [", round(icer_95_percent_interval[1], 2), ",", round(icer_95_percent_interval[2], 2), "]")
# Define the new standard error for the difference in effectiveness
delta_e_se_2 <- 2
# Generate new random draws of cost and effectiveness differences
delta_c_v2 <- rt(n_sim, df_c) * delta_c_se + delta_c_mean
delta_e_v2 <- rt(n_sim, df_e) * delta_e_se_2 + delta_e_mean
# Plot histogram of cost difference
hist(delta_c_v2,
breaks = 20,
xlab = "Cost Difference",
main = "Distribution of Cost Differences",
col = "steelblue")
# Plot histogram of effectiveness difference
hist(delta_e_v2,
xlab = "Effectiveness Difference",
main = "Distribution of Effectiveness Differences",
col = "steelblue")
# Create a tibble for ggplot
data_v2 <- tibble(delta_c_v2, delta_e_v2)
# Make scatterplot in ggplot
ggplot(data_v2, aes(x = delta_c_v2, y = delta_e_v2)) +
geom_point() +
xlab("Cost Difference") +
ylab("Effectiveness Difference") +
ggtitle("Scatterplot of Cost and Effectiveness Differences between Treatments A and B") +
theme_minimal()
# Mutate data_v2-tibble with a ratio-column
data_v2 <- data_v2 %>% mutate(ratio = delta_c_v2/delta_e_v2)
# Find estimate and intervals
icer_estimate_v2 <- mean(data_v2$ratio)
icer_50_percent_interval_v2 <- quantile(data_v2$ratio, probs = c(0.25, 0.75))
icer_95_percent_interval_v2 <- quantile(data_v2$ratio, probs = c(0.025, 0.975))
# Print results
cat("The estimated incremental cost-effectiveness ratio is", round(icer_estimate_v2, 2), "\n")
cat("The 50% interval for the incremental cost-effectiveness ratio is [", round(icer_50_percent_interval_v2[1], 2), ",", round(icer_50_percent_interval_v2[2], 2), "]\n")
cat("The 95% interval for the incremental cost-effectiveness ratio is [", round(icer_95_percent_interval_v2[1], 2), ",", round(icer_95_percent_interval_v2[2], 2), "]")
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved), binwidth = 30) + # map the x variable
geom_histogram(fill = "steelblue", color = "black") + # create histogram with fill color
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved), binwidth = 40) + # map the x variable
geom_histogram(fill = "steelblue", color = "black") + # create histogram with fill color
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved), binwidth = 100) + # map the x variable
geom_histogram(fill = "steelblue", color = "black") + # create histogram with fill color
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 100) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 30) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 10) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 1000) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 10000) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 100000) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 500000) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 50000) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 30000) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 25000) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
# Plot histogram in ggplot
total_saved_df %>%
ggplot(aes(x = total_saved)) + # map the x variable
geom_histogram(fill = "steelblue", color = "black", binwidth = 50000) + # create histogram
geom_vline(aes(xintercept= mean(total_saved)), linetype = "dashed", color = "yellow") + # add vline at mean
xlab("Total USD saved") +
ylab("Frequency") +
theme_minimal() # minimal theme
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
?setwd()
getwd()
setwd("/Users/jacoblillelund/documents/applied-social-science")
raw_data <- read_excel("All_data_FIW_2013-2022", skip = 1, col_names = TRUE)
raw_data <- read_excel("All_data_FIW_2013-2022.xlxs", skip = 1, col_names = TRUE)
raw_data <- read_excel("All_data_FIW_2013-2022.xlxs", skip = 1, col_names = TRUE)
raw_data <- read_excel(All_data_FIW_2013-2022.xlxs, skip = 1, col_names = TRUE)
setwd("/Users/jacoblillelund/documents/applied-social-science")
raw_data <- read_excel("All_data_FIW_2013-2022.xlxs", skip = 1, col_names = TRUE)
getwd()
setwd("~/Documents/applied-social-science)
getwd()
raw_data <- read_excel("All_data_FIW_2013-2022.xlxs", skip = 1, col_names = TRUE)
setwd("/Users/jacoblillelund/Documents/applied-social-science")
getwd()
getwd()
raw_data <- read_excel("All_data_FIW_2013-2022.xlsx", skip = 1, col_names = TRUE)
View(raw_data)
raw_data <- read_excel("All_data_FIW_2013-2022.xlsx", sheet = 2, skip = 1, col_names = TRUE)
View(raw_data)
colanmes(raw_data)
colnames(raw_data)
library(janitor)
install.packages("janitor")
library(readxl)
# tidy data with janitor-package
raw_data <- raw_data %>%
clean_names()
View(raw_data)
library(tidyverse)
# tidy data with janitor-package
raw_data <- raw_data %>%
clean_names()
?clean_names()
library(janitor)
# tidy data with janitor-package
raw_data <- raw_data %>%
clean_names()
View(raw_data)
raw_data %>% select(country_territory, edition, status, pr_rating, cl_rating, a, b, c, add_q, add_a, pr, d, e, f, g, cl, total)
inspect <- raw_data %>% select(country_territory, edition, status, pr_rating, cl_rating, a, b, c, add_q, add_a, pr, d, e, f, g, cl, total)
View(inspect)
inspect %>% filter(inspect$add_a > 0)
inspect_2 <- inspect %>% filter(inspect$add_a > 0)
View(inspect_2)
inspect_2 <- inspect %>% filter(inspect$add_a > 0, na.rm == FALSE)
inspect_2 <- inspect %>% filter(inspect$add_a > 1)
View(inspect_2)
inspect_2 <- inspect %>% filter(inspect$add_a > is.na(FALSE))
inspect_2 <- inspect %>% filter(inspect$add_a > is.na(FALSE))
View(inspect_2)
inspect <- raw_data %>% select(country_territory, edition, a, b, c, add_q, add_a, pr, d, e, f, g, cl, total)
inspect
View(inspect)
## freedom house
fw_data <- read_excel("All_data_FIW_2013-2022.xlsx", sheet = 2, skip = 1, col_names = TRUE)
fw_data <- raw_data %>% # tidy data with janitor-package
clean_names()
## democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", col_names = TRUE)
## democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking", col_names = TRUE)
setwd("/Users/jacoblillelund/Documents/applied-social-science")
## democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking", col_names = TRUE)
setwd("/Users/jacoblillelund/Documents/applied-social-science")
## democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking", col_names = TRUE)
## democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking.numbers", col_names = TRUE)
## democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", col_names = TRUE)
View(dmr_data)
## democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
View(dmr_data)
View(fw_data)
fw_data <- fw_data %>% # tidy data with janitor-package
clean_names()
## democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
dmr_data <- dmr_data %>% # tidy data with janitor-package
clean_names()
fw_data %>% rename(country = country_territory)
View(fw_data)
fw_data <- fw_data %>% rename(country = country_territory) # rename
dmr_data <- dmr_data %>% select(country, total_value_index)
## merged dataframes
# Left join the two data frames by the 'country' column
merged_data <- left_join(fw_data, dmr_data, by = "country")
View(merged_data)
merged_data_total <- merged_data %>% select(country, total, total_value_index)
View(merged_data_total)
merged_data_total <- merged_data %>%
select(country, total, total_value_index) %>%
filter(!is.na(total_value_index))
## freedom house
fw_data <- read_excel("All_data_FIW_2013-2022.xlsx", sheet = 2, skip = 1, col_names = TRUE)
fw_data <- fw_data %>% # tidy data with janitor-package
clean_names()
fw_data <- fw_data %>% rename(country = country_territory) # rename
## democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
dmr_data <- dmr_data %>% # tidy data with janitor-package
clean_names()
dmr_data <- dmr_data %>% select(country, total_value_index)
# merge dataframes
fw_data_mergeready <-  fw_data %>% filter(edition == 2022)
# Left join the two data frames by the 'country' column
merged_data <- left_join(fw_data_mergeready, dmr_data, by = "country")
merged_data_total <- merged_data %>%
select(country, total, total_value_index) %>%
filter(!is.na(total_value_index))
merged_data_total_values <- merged_data %>%
select(country, total, total_value_index) %>%
filter(!is.na(total_value_index))
View(merged_data_total_values)
merged_data_total_values <- merged_data %>%
select(country, total, total_value_index) %>%
filter(!is.na(total_value_index)) %>%
mutate(total_value_index = total_value_index/10)
# Scatterplot and correllation
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index)) +
geom_point()
# Scatterplot
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index)) +
geom_point() +
geom_smooth(method = "lm")
# Scatterplot
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Scatterplot
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index)) +
geom_text() +
geom_smooth(method = "lm", se = FALSE)
point
# Scatterplot
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Scatterplot
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index, label = country)) +
geom_text() +
geom_smooth(method = "lm", se = FALSE)
library(readxl)
library(janitor)
library(tidyverse)
setwd("/Users/jacoblillelund/Documents/applied-social-science")
# load data
# Freedom house
fw_data <- read_excel("All_data_FIW_2013-2022.xlsx", sheet = 2, skip = 1, col_names = TRUE)
fw_data <- fw_data %>% # tidy data with janitor-package
clean_names()
fw_data <- fw_data %>% rename(country = country_territory) # rename
# Democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
dmr_data <- dmr_data %>% # tidy data with janitor-package
clean_names()
dmr_data <- dmr_data %>% select(country, total_value_index) # select values
# merge dataframes
fw_data_mergeready <-  fw_data %>% filter(edition == 2020)
# Left join the two data frames by the 'country' column
merged_data <- left_join(fw_data_mergeready, dmr_data, by = "country")
merged_data_total_values <- merged_data %>%
select(country, total, total_value_index) %>%
filter(!is.na(total_value_index)) %>%
mutate(total_value_index = total_value_index/10)
# Scatterplot
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index, label = country)) +
geom_text() +
geom_smooth(method = "lm", se = FALSE)
cor(merged_data_total_values$total, merged_data_total_values$total_value_index)
library(readxl)
library(janitor)
library(tidyverse)
setwd("/Users/jacoblillelund/Documents/applied-social-science")
# load data
# Freedom house
fw_data <- read_excel("All_data_FIW_2013-2022.xlsx", sheet = 2, skip = 1, col_names = TRUE)
fw_data <- fw_data %>% # tidy data with janitor-package
clean_names()
fw_data <- fw_data %>% rename(country = country_territory) # rename
# Democracy matrix ranking
dmr_data <- read_excel("democracy-matrix-ranking.xlsx", skip = 1, col_names = TRUE)
dmr_data <- dmr_data %>% # tidy data with janitor-package
clean_names()
dmr_data <- dmr_data %>% select(country, total_value_index) # select values
# merge dataframes
fw_data_mergeready <-  fw_data %>% filter(edition == 2020)
# Left join the two data frames by the 'country' column
merged_data <- left_join(fw_data_mergeready, dmr_data, by = "country")
merged_data_total_values <- merged_data %>%
select(country, total, total_value_index) %>%
filter(!is.na(total_value_index)) %>%
mutate(total_value_index = total_value_index/10)
# Scatterplot
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index, label = country)) +
geom_text() +
geom_smooth(method = "lm", se = FALSE)
# Check correlation
cor(merged_data_total_values$total, merged_data_total_values$total_value_index)
# Merge dataframes
fw_data_mergeready <-  fw_data %>% filter(edition == 2020) # filter for relevant year
# join the two data frames by the 'country' column
merged_data <- left_join(fw_data_mergeready, dmr_data, by = "country")
# Wrangle
merged_data_total_values <- merged_data %>%
select(country, total, total_value_index) %>%  # select relevant columns
filter(!is.na(total_value_index)) %>% # filter for rows with missing values (territories are not included in Democracy Matrix ranking)
mutate(total_value_index = total_value_index/10) # scale the democracy ranking to 0-100 from 0-1000
# Draw Scatterplot
merged_data_total_values %>%
ggplot(aes(x = total, y = total_value_index, label = country)) +
geom_text() +
geom_smooth(method = "lm", se = FALSE)
# Check correlation
cor(merged_data_total_values$total, merged_data_total_values$total_value_index)
